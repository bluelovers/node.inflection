"use strict";
/**
 * @description These rules translate from the singular form of a noun to its plural form.
 * @private
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.regex = void 0;
exports.regex = {
    plural: {
        men: new RegExp('^(m|wom)en$', 'gi'),
        people: new RegExp('(pe)ople$', 'gi'),
        children: new RegExp('(child)ren$', 'gi'),
        tia: new RegExp('([ti])a$', 'gi'),
        analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),
        hives: new RegExp('(hi|ti)ves$', 'gi'),
        curves: new RegExp('(curve)s$', 'gi'),
        lrves: new RegExp('([lr])ves$', 'gi'),
        aves: new RegExp('([a])ves$', 'gi'),
        foves: new RegExp('([^fo])ves$', 'gi'),
        movies: new RegExp('(m)ovies$', 'gi'),
        aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),
        series: new RegExp('(s)eries$', 'gi'),
        xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),
        mice: new RegExp('([m|l])ice$', 'gi'),
        buses: new RegExp('(bus)es$', 'gi'),
        oes: new RegExp('(o)es$', 'gi'),
        shoes: new RegExp('(shoe)s$', 'gi'),
        crises: new RegExp('(cris|ax|test)es$', 'gi'),
        octopi: new RegExp('(octop|vir)i$', 'gi'),
        aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),
        summonses: new RegExp('^(summons)es$', 'gi'),
        oxen: new RegExp('^(ox)en', 'gi'),
        matrices: new RegExp('(matr)ices$', 'gi'),
        vertices: new RegExp('(vert|ind)ices$', 'gi'),
        feet: new RegExp('^feet$', 'gi'),
        teeth: new RegExp('^teeth$', 'gi'),
        geese: new RegExp('^geese$', 'gi'),
        quizzes: new RegExp('(quiz)zes$', 'gi'),
        whereases: new RegExp('^(whereas)es$', 'gi'),
        criteria: new RegExp('^(criteri)a$', 'gi'),
        genera: new RegExp('^genera$', 'gi'),
        ss: new RegExp('ss$', 'gi'),
        s: new RegExp('s$', 'gi'),
    },
    singular: {
        man: new RegExp('^(m|wom)an$', 'gi'),
        person: new RegExp('(pe)rson$', 'gi'),
        child: new RegExp('(child)$', 'gi'),
        ox: new RegExp('^(ox)$', 'gi'),
        axis: new RegExp('(ax|test)is$', 'gi'),
        octopus: new RegExp('(octop|vir)us$', 'gi'),
        alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),
        summons: new RegExp('^(summons)$', 'gi'),
        bus: new RegExp('(bu)s$', 'gi'),
        buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),
        tium: new RegExp('([ti])um$', 'gi'),
        sis: new RegExp('sis$', 'gi'),
        ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),
        hive: new RegExp('(hi|ti)ve$', 'gi'),
        aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),
        x: new RegExp('(x|ch|ss|sh)$', 'gi'),
        matrix: new RegExp('(matr)ix$', 'gi'),
        vertex: new RegExp('(vert|ind)ex$', 'gi'),
        mouse: new RegExp('([m|l])ouse$', 'gi'),
        foot: new RegExp('^foot$', 'gi'),
        tooth: new RegExp('^tooth$', 'gi'),
        goose: new RegExp('^goose$', 'gi'),
        quiz: new RegExp('(quiz)$', 'gi'),
        whereas: new RegExp('^(whereas)$', 'gi'),
        criterion: new RegExp('^(criteri)on$', 'gi'),
        genus: new RegExp('^genus$', 'gi'),
        s: new RegExp('s$', 'gi'),
        common: new RegExp('$', 'gi'),
    },
};
exports.default = exports.regex;
//# sourceMappingURL=regex.js.map